{"version":3,"sources":["components/MovieSearchForm.js","components/MovieResult.js","components/MovieNominations.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","myChangeHandler","event","nam","target","name","val","value","err","Number","setState","errormessage","mySubmitHandler","preventDefault","form","FormData","console","log","state","username","fetchUrl","fetch","then","res","json","result","isLoaded","items","movieList","error","age","onSubmit","this","style","background","type","onChange","Component","MovieResult","MovieNominations","App","className","MovieSearchForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6PA4EeA,E,kDAzEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,gBAAkB,SAACC,GACjB,IAAIC,EAAMD,EAAME,OAAOC,KACnBC,EAAMJ,EAAME,OAAOG,MACnBC,EAAM,GACE,QAARL,IACU,KAARG,GAAeG,OAAOH,KACxBE,EAAM,+DAGV,EAAKE,SAAS,CAAEC,aAAcH,IAC9B,EAAKE,SAAL,eAAiBP,EAAMG,KAnBN,EAsBnBM,gBAAkB,SAACV,GACjBA,EAAMW,iBACN,IAAMC,EAAOZ,EAAME,OACN,IAAIW,SAASD,GAE1BE,QAAQC,IAAI,aAAc,EAAKC,MAAMC,UACrC,IAAIC,EAAQ,oDAAgD,EAAKF,MAAMC,UAKvEE,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,EAAKf,SAAS,CACZgB,UAAU,EACVC,MAAOF,EAAOE,MACdC,UAAWH,IAGbT,QAAQC,IAAI,WAAYQ,GACxBT,QAAQC,IAAI,cAAe,EAAKC,MAAMU,UAAU,OAIlD,SAACC,GACC,EAAKnB,SAAS,CACZgB,UAAU,EACVG,cAjDR,EAAKX,MAAQ,CACXC,SAAU,GACVW,IAAK,KACLnB,aAAc,GACdiB,UAAW,IANI,E,qDAyDjB,OACE,0BAAMG,SAAUC,KAAKpB,gBAAiBqB,MAAO,CAAEC,WAAY,QAIzD,0CACA,2BAAOC,KAAK,OAAO9B,KAAK,WAAW+B,SAAUJ,KAAK/B,kBAGlD,2BAAOkC,KAAK,WACXH,KAAKd,MAAMP,kB,GApED0B,aCUJC,EAVf,uKAEI,OACE,6BACE,+CAJR,GAAiCD,aCUlBE,G,MAVf,uKAEI,OACE,6BACE,gDAJR,GAAsCF,cCgBvBG,E,uKAXF,OACT,yBAAKC,UAAU,OACb,4CACA,kBAACC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANYL,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLb,QAAQa,MAAMA,EAAM8B,a","file":"static/js/main.9798fb8a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      age: null,\r\n      errormessage: \"\",\r\n      movieList: []\r\n    };\r\n  }\r\n  myChangeHandler = (event) => {\r\n    let nam = event.target.name;\r\n    let val = event.target.value;\r\n    let err = \"\";\r\n    if (nam === \"age\") {\r\n      if (val !== \"\" && !Number(val)) {\r\n        err = <strong>Your age must be a number</strong>;\r\n      }\r\n    }\r\n    this.setState({ errormessage: err });\r\n    this.setState({ [nam]: val });\r\n  };\r\n\r\n  mySubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    const form = event.target;\r\n    const data = new FormData(form);\r\n\r\n    console.log(\"username: \", this.state.username);\r\n    let fetchUrl = `http://www.omdbapi.com/?apikey=7535d36f&s=${this.state.username}`\r\n\r\n    //alert(\"You are submitting \" + this.state.username);\r\n    //http://www.omdbapi.com/?t=007&apikey=7535d36f\r\n\r\n    fetch(fetchUrl)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.items,\r\n            movieList: result\r\n          });\r\n\r\n          console.log('result: ', result)\r\n          console.log('movieList: ', this.state.movieList[0])\r\n\r\n\r\n        }, \r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error,\r\n          });\r\n        }\r\n      );\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.mySubmitHandler} style={{ background: \"red\" }}>\r\n        {/* <h1>\r\n            Hello {this.state.username} {this.state.age}\r\n          </h1> */}\r\n        <p>Movie Title</p>\r\n        <input type=\"text\" name=\"username\" onChange={this.myChangeHandler} />\r\n        {/* <p>Enter your age:</p>\r\n          <input type=\"text\" name=\"age\" onChange={this.myChangeHandler} /> */}\r\n        <input type=\"submit\" />\r\n        {this.state.errormessage}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class MovieResult extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Result for</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieResult;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class MovieNominations extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Nominations</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieNominations;\r\n","import React, { Component } from \"react\";\nimport MovieSearchForm from \"./components/MovieSearchForm\"\nimport MovieResult from \"./components/MovieResult\"\nimport './App.css';\nimport MovieNominations from \"./components/MovieNominations\";\n\nclass App extends Component {\n  render() { return (\n    <div className=\"App\">\n      <h1>The Shoppies</h1>\n      <MovieSearchForm/>\n      <MovieResult/>\n      <MovieNominations/>\n\n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}