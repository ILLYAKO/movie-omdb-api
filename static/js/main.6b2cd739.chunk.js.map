{"version":3,"sources":["components/MovieSearchForm.js","components/pagination/Pagination.js","components/MovieResult.js","components/MovieNominations.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","myChangeHandler","event","setState","movieName","target","value","mySubmitHandler","preventDefault","onSearcMovieName","state","onSubmit","this","type","name","onChange","placeholder","serverResponse","Response","Error","Component","Pagination","handlePageClick","e","selectedPage","selected","currentPageHandler","currentPage","pageCount","bind","totalPages","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","MovieResult","number","fetchReqest","clickHandler","movie","movieNominationshandler","disabledButtons","omdbUrl","basicUrl","concat","apikey","fetch","then","res","json","result","toLowerCase","movieList","Search","serverResponseHandler","Math","ceil","totalResults","resultPerPage","error","prevProps","className","map","index","key","style","backgroundImage","Poster","Title","Year","onClick","disabled","includes","imdbID","MovieNominations","movieRemoveNominhandler","isFiveNominants","movieNominants","App","a","movieNamehandler","length","imdbIDNumber","arrayM","filter","element","item","MovieSearchForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6b2cd739.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movieName: \"\",\r\n    };\r\n  }\r\n\r\n  myChangeHandler = (event) => {\r\n    this.setState({ movieName: event.target.value });\r\n  };\r\n\r\n  mySubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSearcMovieName(this.state.movieName);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.mySubmitHandler} >\r\n        <label>\r\n          Movie Title: \r\n        </label>\r\n        <input type=\"text\" name=\"movieName\" onChange={this.myChangeHandler} placeholder=\"Movie name...\" />\r\n        <input type=\"submit\" value=\"Search\" />\r\n        {this.props.serverResponse.Response === \"False\" && (\r\n          <div>\r\n            <p>OMDB Response: {this.props.serverResponse.Error}</p>\r\n            <p>Try againe!</p>\r\n          </div>\r\n        )}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport \"./pagination.css\";\r\n\r\nclass Pagination extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {   \r\n      currentPage: this.props.currentPage,\r\n      pageCount: 0\r\n    };\r\n    this.handlePageClick = this.handlePageClick.bind(this);\r\n  }\r\n\r\n  handlePageClick = (e) => {\r\n    const selectedPage = e.selected;\r\n    this.props.currentPageHandler(selectedPage);\r\n  };\r\n\r\n  componentDidMount() {\r\n   this.setState({pageCount:this.props.totalPages})\r\n  }\r\n  render() {\r\n    return (\r\n      <div>        \r\n        <ReactPaginate\r\n          previousLabel={\"prev\"}\r\n          nextLabel={\"next\"}\r\n          breakLabel={\"...\"}\r\n          breakClassName={\"break-me\"}\r\n          pageCount={this.state.pageCount}\r\n          marginPagesDisplayed={1}\r\n          pageRangeDisplayed={3}\r\n          onPageChange={this.handlePageClick}\r\n          containerClassName={\"pagination\"}\r\n          subContainerClassName={\"pages pagination\"}\r\n          activeClassName={\"active\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Pagination;\r\n","import React, { Component } from \"react\";\r\nimport Pagination from \"./pagination/Pagination\";\r\n\r\nclass MovieResult extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movieList: [],\r\n      currentPage: 0,\r\n      totalPages: 0,\r\n      resultPerPage: 10,\r\n      disabledButtons: [],\r\n      apikey: \"7535d36f\",\r\n      basicUrl: \"https://www.omdbapi.com/?apikey=\",\r\n    };\r\n  }\r\n\r\n  currentPageHandler = (number) => {\r\n    this.setState({ currentPage: number }, () => {\r\n      this.fetchReqest();\r\n    });\r\n  };\r\n\r\n  clickHandler = (movie) => {\r\n    this.props.movieNominationshandler(movie);\r\n    this.setState({ disabledButtons: this.props.disabledButtons });\r\n  };\r\n\r\n  omdbUrl = () => {\r\n    return this.state.basicUrl\r\n      .concat(this.state.apikey)\r\n      .concat(\"&type=movie&s=\")\r\n      .concat(this.props.movieName)\r\n      .concat(\"&page=\")\r\n      .concat(this.state.currentPage + 1);\r\n  };\r\n\r\n  fetchReqest = () => {\r\n    fetch(this.omdbUrl(), [])\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.Response.toLowerCase() === \"true\") {\r\n            this.setState({ movieList: result.Search });\r\n            this.props.serverResponseHandler(result);\r\n            this.setState({\r\n              totalPages: Math.ceil(\r\n                this.props.serverResponse.totalResults /\r\n                  this.state.resultPerPage\r\n              ),\r\n            });\r\n          } else {\r\n            this.setState({ movieList: [] });\r\n            this.setState({ currentPage: 0 });\r\n            this.setState({ totalPages: 0 });\r\n            this.props.serverResponseHandler(result);\r\n          }\r\n        },\r\n        (error) => {\r\n          this.setState({ error });\r\n        }\r\n      );\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.movieName !== prevProps.movieName) {\r\n      this.fetchReqest();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"column result\">\r\n        {this.props.movieName ? (\r\n          <h2>Results for \"{this.props.movieName}\"</h2>\r\n        ) : (\r\n          <h2>Result</h2>\r\n        )}\r\n        <div className=\"result list\">\r\n          <ul>\r\n            {this.state.movieList.map((movie, index) => (\r\n              <li key={index}>\r\n                <div\r\n                  className=\"movie-img\"\r\n                  style={{ backgroundImage: `url(${movie.Poster})` }}\r\n                ></div>\r\n                <p className=\"movie-dscr\">\r\n                  {movie.Title} {movie.Year}\r\n                </p>\r\n                <button\r\n                  onClick={() => {\r\n                    this.clickHandler(movie);\r\n                  }}\r\n                  disabled={this.props.disabledButtons.includes(movie.imdbID)}\r\n                >\r\n                  Nominate\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        {this.state.totalPages !== 0 && (\r\n          <Pagination\r\n            currentPage={this.state.currentPage}\r\n            currentPageHandler={this.currentPageHandler}\r\n            totalPages={this.state.totalPages}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieResult;\r\n","import React, { Component } from \"react\";\r\n\r\nclass MovieNominations extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  clickHandler = (index) => {\r\n    this.props.movieRemoveNominhandler(index);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"column nomination\">\r\n        <h2>Nominations</h2>\r\n        {this.props.isFiveNominants && (\r\n          <div className=\"five nominates\">\r\n            <h3>Thank you for your choice the 5 Nominates!</h3>\r\n          </div>\r\n        )}\r\n        {this.props.movieNominants.map((movie, index) => (\r\n          <li key={index}>\r\n            <div className=\"movie-img\" style={{backgroundImage:`url(${movie.Poster})`}}>\r\n            </div>\r\n            <p className=\"movie-dscr\">\r\n              {movie.Title} ({movie.Year}) Nominate\r\n            </p>\r\n            <button\r\n              onClick={() => {\r\n                this.clickHandler(movie.imdbID);\r\n              }}\r\n            >\r\n              Remove\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieNominations;\r\n","import React, { Component } from \"react\";\nimport MovieSearchForm from \"./components/MovieSearchForm\";\nimport MovieResult from \"./components/MovieResult\";\nimport MovieNominations from \"./components/MovieNominations\";\n\nclass App extends Component {\n  state = {\n    serverResponse: {\n      Response: \"\",\n      Error: \"\",\n      Search: [],\n      totalResults: \"\",\n    },\n    movieName: \"\",\n    movieNominants: [],\n    disabledButtons: [],\n    isFiveNominants: false,\n  };\n\n  serverResponseHandler = async (serverResponse) => {\n    await this.setState({ serverResponse });\n  };\n\n  movieNamehandler = async (name) => {\n    await this.setState({ movieName: name });\n  };\n\n  movieNominationshandler = async (movie) => {\n    if (this.state.movieNominants.length <= 4) {\n      await this.setState({\n        movieNominants: [...this.state.movieNominants, movie],\n        disabledButtons: [...this.state.disabledButtons, movie.imdbID],\n      });\n    } else {\n      this.setState({ isFiveNominants: true });\n    }\n\n    this.state.movieNominants.length <= 4\n      ? this.setState({ isFiveNominants: false })\n      : this.setState({ isFiveNominants: true });\n  };\n\n  movieRemoveNominhandler = (imdbIDNumber) => {\n    let arrayM = [...this.state.movieNominants];\n    if (imdbIDNumber !== -1) {\n      arrayM = arrayM.filter((element) => element.imdbID !== imdbIDNumber);\n      this.setState({ movieNominants: arrayM });\n      this.setState({ isFiveNominants: false });\n    }\n    this.setState({\n      disabledButtons: this.state.disabledButtons.filter((item) => {\n        return item !== imdbIDNumber;\n      }),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>The Shoppies</h1>\n        <MovieSearchForm\n          onSearcMovieName={this.movieNamehandler}\n          serverResponse={this.state.serverResponse}\n        />\n        <div className=\"row result nomination\">\n          <MovieResult\n            serverResponseHandler={this.serverResponseHandler}\n            movieName={this.state.movieName}\n            movieNominationshandler={this.movieNominationshandler}\n            disabledButtons={this.state.disabledButtons}\n            serverResponse={this.state.serverResponse}\n          />\n          <MovieNominations\n            movieNominants={this.state.movieNominants}\n            isFiveNominants={this.state.isFiveNominants}\n            movieRemoveNominhandler={this.movieRemoveNominhandler}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n//  <React.StrictMode>\n    <App />,\n // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}